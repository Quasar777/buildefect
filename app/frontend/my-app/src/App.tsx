// src/App.tsx
import React, { Suspense, useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, useNavigate } from 'react-router-dom';
import { AuthProvider, useAuth } from './context/AuthContext';
import SignInPage from './pages/SignInPage/SignInPage';
import SignUpPage from './pages/SignUpPage/SignUpPage';
import BuildingSelector from './components/UI/BuildingSelector/BuildingSelector';
import DefectsList from './components/UI/DefectsList/DefectsList';
import { RequireAuth, RequireRole } from './components/RouteGuards';
import './App.scss';

// –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç)
const DefectPage = React.lazy(() => import('./pages/DefectPage/DefectPage').catch(() => ({ default: () => <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–µ—Ñ–µ–∫—Ç–∞</div> })));
const NewDefectPage = React.lazy(() => import('./pages/CreateDefectPage/CreateDefectPage').catch(() => ({ default: () => <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–∞</div> })));
const AnalyticsPage = React.lazy(() => import('./pages/AnalyticsPage/AnalyticsPage').catch(() => ({ default: () => <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏</div> })));

type Building = {
  id: number;
  name: string;
  address: string;
  stage: string;
};

const PrivateLayout: React.FC<{ children: React.ReactNode; selectedBuilding: Building | null; setSelectedBuilding: (b: Building | null) => void; }> = ({ children, selectedBuilding, setSelectedBuilding }) => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  return (
    <div className="App">
      <header className="header">
        <h1 className="app-title">BuilDefect</h1>
        <div className="header__right">
          <BuildingSelector
            onBuildingSelect={setSelectedBuilding}
            selectedBuilding={selectedBuilding}
          />
          <button
            className="header__btn"
            onClick={() => navigate('/defects/new')}
            title="–°–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç"
          >
            ‚ûï –ù–æ–≤—ã–π –¥–µ—Ñ–µ–∫—Ç
          </button>
          <button
            className="header__btn"
            onClick={() => navigate('/analytics')}
            title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
            disabled={user?.role !== 'observer'}
          >
            üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
          </button>

          <div className="user-info">
            <span className="user-name">–ü—Ä–∏–≤–µ—Ç, {user?.name} {user?.lastname}</span>
            <span className="user-role">{user?.role} | ID: {user?.id}</span>
            <button className="logout-btn" onClick={() => logout()}>
              –í—ã–π—Ç–∏
            </button>
          </div>
        </div>
      </header>

      <main className="main">
        {children}
      </main>
    </div>
  );
};

const Dashboard: React.FC = () => {
  const [selectedBuilding, setSelectedBuilding] = useState<Building | null>(null);

  return (
    <PrivateLayout selectedBuilding={selectedBuilding} setSelectedBuilding={setSelectedBuilding}>
      <div className="dashboard">
        <DefectsList
          buildingId={selectedBuilding?.id || null}
          onDefectClick={(defect) => {
            // –ø—Ä–∏ –∫–ª–∏–∫–µ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ñ–µ–∫—Ç–∞
            // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ defect –∏–º–µ–µ—Ç –ø–æ–ª–µ id
            window.location.href = `/defects/${defect.id}`;
          }}
        />
      </div>
    </PrivateLayout>
  );
};

const AppRoutes: React.FC = () => {
  const { isAuth } = useAuth();

  return (
    <Suspense fallback={<div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>}>
      <Routes>
        <Route path="/signin" element={!isAuth ? <SignInPage /> : <Navigate to="/" replace />} />
        <Route path="/signup" element={!isAuth ? <SignUpPage /> : <Navigate to="/" replace />} />

        {/* –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
        <Route
          path="/"
          element={
            <RequireAuth>
              <Dashboard />
            </RequireAuth>
          }
        />

        <Route
          path="/defects/new"
          element={
            <RequireAuth>
              {/* –ª—é–±–æ–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç (engineer/manager/observer –º–æ–≥—É—Ç –ø–æ API, –Ω–æ –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å) */}
              <NewDefectPage />
            </RequireAuth>
          }
        />

        <Route
          path="/defects/:id"
          element={
            <RequireAuth>
              <DefectPage />
            </RequireAuth>
          }
        />

        <Route
          path="/analytics"
          element={
            <RequireAuth>
              <RequireRole roles={['observer']}>
                <AnalyticsPage />
              </RequireRole>
            </RequireAuth>
          }
        />

        {/* catch-all */}
        <Route path="*" element={<Navigate to={isAuth ? '/' : '/signin'} replace />} />
      </Routes>
    </Suspense>
  );
};

const AppContent: React.FC = () => {
  const { loading } = useAuth();

  if (loading) {
    return (
      <div className="App">
        <div className="loading">
          <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    );
  }

  return <AppRoutes />;
};

function App() {
  return (
    <AuthProvider>
      <Router>
        <AppContent />
      </Router>
    </AuthProvider>
  );
}

export default App;
